{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/familsamadli/Desktop/FIXIFY_USER/node_modules/react-native-indicator/lib/loader/PulseLoader.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { ART } from \"react-native-web/dist/index\";\nimport AnimatedCircle from \"../animated/AnimatedCircle\";\nimport { color } from \"../const\";\nvar Surface = ART.Surface;\n\nvar PulseLoader = function (_React$PureComponent) {\n  _inherits(PulseLoader, _React$PureComponent);\n\n  function PulseLoader() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PulseLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PulseLoader)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      effect: new Animated.ValueXY({\n        x: 0,\n        y: 1\n      })\n    };\n\n    _this._animation = function () {\n      Animated.parallel([Animated.timing(_this.state.effect.x, {\n        toValue: 1,\n        duration: _this.props.frequency\n      }), Animated.timing(_this.state.effect.y, {\n        toValue: 0.05,\n        duration: _this.props.frequency\n      })]).start(function () {\n        if (!_this.unmounted) {\n          _this.state.effect.setValue({\n            x: 0,\n            y: 1\n          });\n\n          _this._animation();\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(PulseLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size;\n      return React.createElement(Surface, {\n        width: size,\n        height: size,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }, React.createElement(AnimatedCircle, {\n        radius: size,\n        fill: color,\n        scale: this.state.effect.x,\n        opacity: this.state.effect.y,\n        x: size / 2,\n        y: size / 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      }));\n    }\n  }]);\n\n  return PulseLoader;\n}(React.PureComponent);\n\nPulseLoader.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  frequency: PropTypes.number\n};\nPulseLoader.defaultProps = {\n  color: color,\n  size: 30,\n  frequency: 1000\n};\nexport { PulseLoader as default };","map":{"version":3,"sources":["/Users/familsamadli/Desktop/FIXIFY_USER/node_modules/react-native-indicator/lib/loader/PulseLoader.js"],"names":["React","PropTypes","ART","AnimatedCircle","color","Surface","PulseLoader","state","effect","Animated","ValueXY","x","y","_animation","parallel","timing","toValue","duration","props","frequency","start","unmounted","setValue","size","PureComponent","propTypes","string","number","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;SACmBC,G;AACnB,OAAOC,cAAP;AACA,SAASC,KAAT;IAEQC,O,GAAYH,G,CAAZG,O;;IAEaC,W;;;;;;;;;;;;;;;UAapBC,K,GAAQ;AACPC,MAAAA,MAAM,EAAE,IAAIC,QAAQ,CAACC,OAAb,CAAqB;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAArB;AADD,K;;UAYRC,U,GAAa,YAAM;AAClBJ,MAAAA,QAAQ,CAACK,QAAT,CAAkB,CACjBL,QAAQ,CAACM,MAAT,CAAgB,MAAKR,KAAL,CAAWC,MAAX,CAAkBG,CAAlC,EAAqC;AAAEK,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC;AAAnC,OAArC,CADiB,EAEjBV,QAAQ,CAACM,MAAT,CAAgB,MAAKR,KAAL,CAAWC,MAAX,CAAkBI,CAAlC,EAAqC;AAAEI,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,QAAQ,EAAE,MAAKC,KAAL,CAAWC;AAAtC,OAArC,CAFiB,CAAlB,EAGGC,KAHH,CAGS,YAAM;AACd,YAAI,CAAC,MAAKC,SAAV,EAAqB;AACpB,gBAAKd,KAAL,CAAWC,MAAX,CAAkBc,QAAlB,CAA2B;AAAEX,YAAAA,CAAC,EAAE,CAAL;AAAQC,YAAAA,CAAC,EAAE;AAAX,WAA3B;;AACA,gBAAKC,UAAL;AACA;AACD,OARD;AASA,K;;;;;;;wCAlBmB;AACnB,WAAKA,UAAL;AACA;;;2CAEsB;AACtB,WAAKQ,SAAL,GAAiB,IAAjB;AACA;;;6BAcQ;AAAA,wBACgB,KAAKH,KADrB;AAAA,UACAd,KADA,eACAA,KADA;AAAA,UACOmB,IADP,eACOA,IADP;AAER,aACC,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAEA,IAAhB;AAAsB,QAAA,MAAM,EAAEA,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AACC,QAAA,MAAM,EAAEA,IADT;AAEC,QAAA,IAAI,EAAEnB,KAFP;AAGC,QAAA,KAAK,EAAE,KAAKG,KAAL,CAAWC,MAAX,CAAkBG,CAH1B;AAIC,QAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWC,MAAX,CAAkBI,CAJ5B;AAKC,QAAA,CAAC,EAAEW,IAAI,GAAG,CALX;AAMC,QAAA,CAAC,EAAEA,IAAI,GAAG,CANX;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADD;AAYA;;;;EAnDuCvB,KAAK,CAACwB,a;;AAA1BlB,W,CACbmB,S,GAAY;AAClBrB,EAAAA,KAAK,EAAEH,SAAS,CAACyB,MADC;AAElBH,EAAAA,IAAI,EAAEtB,SAAS,CAAC0B,MAFE;AAGlBR,EAAAA,SAAS,EAAElB,SAAS,CAAC0B;AAHH,C;AADCrB,W,CAObsB,Y,GAAe;AACrBxB,EAAAA,KAAK,EAALA,KADqB;AAErBmB,EAAAA,IAAI,EAAE,EAFe;AAGrBJ,EAAAA,SAAS,EAAE;AAHU,C;SAPFb,W","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, ART } from 'react-native';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nconst { Surface } = ART;\n\nexport default class PulseLoader extends React.PureComponent {\n\tstatic propTypes = {\n\t\tcolor: PropTypes.string,\n\t\tsize: PropTypes.number,\n\t\tfrequency: PropTypes.number\n\t};\n\n\tstatic defaultProps = {\n\t\tcolor,\n\t\tsize: 30,\n\t\tfrequency: 1000\n\t};\n\n\tstate = {\n\t\teffect: new Animated.ValueXY({ x: 0, y: 1 })\n\t};\n\n\tcomponentDidMount() {\n\t\tthis._animation();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.unmounted = true;\n\t}\n\n\t_animation = () => {\n\t\tAnimated.parallel([\n\t\t\tAnimated.timing(this.state.effect.x, { toValue: 1, duration: this.props.frequency }),\n\t\t\tAnimated.timing(this.state.effect.y, { toValue: 0.05, duration: this.props.frequency })\n\t\t]).start(() => {\n\t\t\tif (!this.unmounted) {\n\t\t\t\tthis.state.effect.setValue({ x: 0, y: 1 });\n\t\t\t\tthis._animation();\n\t\t\t}\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { color, size } = this.props;\n\t\treturn (\n\t\t\t<Surface width={size} height={size}>\n\t\t\t\t<AnimatedCircle\n\t\t\t\t\tradius={size}\n\t\t\t\t\tfill={color}\n\t\t\t\t\tscale={this.state.effect.x}\n\t\t\t\t\topacity={this.state.effect.y}\n\t\t\t\t\tx={size / 2}\n\t\t\t\t\ty={size / 2}\n\t\t\t\t/>\n\t\t\t</Surface>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}