{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/familsamadli/Desktop/FIXIFY_USER/node_modules/react-native-indicator/lib/loader/BreathingLoader.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { ART } from \"react-native-web/dist/index\";\nimport AnimatedCircle from \"../animated/AnimatedCircle\";\nimport { color } from \"../const\";\nvar Surface = ART.Surface;\n\nvar BreathingLoader = function (_React$PureComponent) {\n  _inherits(BreathingLoader, _React$PureComponent);\n\n  function BreathingLoader(props) {\n    var _this;\n\n    _classCallCheck(this, BreathingLoader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BreathingLoader).call(this, props));\n\n    _this._animation = function () {\n      Animated.sequence([Animated.timing(_this.state.scale, {\n        toValue: 1,\n        duration: _this.props.frequency\n      }), Animated.timing(_this.state.scale, {\n        toValue: 0.1,\n        duration: _this.props.frequency\n      })]).start(function () {\n        !_this.unmounted && _this._animation();\n      });\n    };\n\n    _this.state = {\n      scale: new Animated.Value(0.1)\n    };\n    return _this;\n  }\n\n  _createClass(BreathingLoader, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._animation();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          color = _this$props.color,\n          size = _this$props.size,\n          strokeWidth = _this$props.strokeWidth;\n      return React.createElement(Surface, {\n        width: size + strokeWidth,\n        height: size + strokeWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        }\n      }, React.createElement(AnimatedCircle, {\n        radius: size,\n        stroke: color,\n        strokeWidth: strokeWidth,\n        scale: this.state.scale,\n        x: (size + strokeWidth) / 2,\n        y: (size + strokeWidth) / 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        }\n      }));\n    }\n  }]);\n\n  return BreathingLoader;\n}(React.PureComponent);\n\nBreathingLoader.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  frequency: PropTypes.number\n};\nBreathingLoader.defaultProps = {\n  color: color,\n  size: 30,\n  strokeWidth: 3,\n  frequency: 800\n};\nexport { BreathingLoader as default };","map":{"version":3,"sources":["/Users/familsamadli/Desktop/FIXIFY_USER/node_modules/react-native-indicator/lib/loader/BreathingLoader.js"],"names":["React","PropTypes","ART","AnimatedCircle","color","Surface","BreathingLoader","props","_animation","Animated","sequence","timing","state","scale","toValue","duration","frequency","start","unmounted","Value","size","strokeWidth","PureComponent","propTypes","string","number","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;SACmBC,G;AACnB,OAAOC,cAAP;AACA,SAASC,KAAT;IAEQC,O,GAAYH,G,CAAZG,O;;IAEaC,e;;;AAepB,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,yFAAMA,KAAN;;AADkB,UAenBC,UAfmB,GAeN,YAAM;AAClBC,MAAAA,QAAQ,CAACC,QAAT,CAAkB,CACjBD,QAAQ,CAACE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,EAAkC;AAAEC,QAAAA,OAAO,EAAE,CAAX;AAAcC,QAAAA,QAAQ,EAAE,MAAKR,KAAL,CAAWS;AAAnC,OAAlC,CADiB,EAEjBP,QAAQ,CAACE,MAAT,CAAgB,MAAKC,KAAL,CAAWC,KAA3B,EAAkC;AAAEC,QAAAA,OAAO,EAAE,GAAX;AAAgBC,QAAAA,QAAQ,EAAE,MAAKR,KAAL,CAAWS;AAArC,OAAlC,CAFiB,CAAlB,EAGGC,KAHH,CAGS,YAAM;AACd,SAAC,MAAKC,SAAN,IAAmB,MAAKV,UAAL,EAAnB;AACA,OALD;AAMA,KAtBkB;;AAElB,UAAKI,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE,IAAIJ,QAAQ,CAACU,KAAb,CAAmB,GAAnB;AADK,KAAb;AAFkB;AAKlB;;;;wCAEmB;AACnB,WAAKX,UAAL;AACA;;;2CAEsB;AACtB,WAAKU,SAAL,GAAiB,IAAjB;AACA;;;6BAWQ;AAAA,wBAC6B,KAAKX,KADlC;AAAA,UACAH,KADA,eACAA,KADA;AAAA,UACOgB,IADP,eACOA,IADP;AAAA,UACaC,WADb,eACaA,WADb;AAER,aACC,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAED,IAAI,GAAGC,WAAvB;AAAoC,QAAA,MAAM,EAAED,IAAI,GAAGC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,cAAD;AACC,QAAA,MAAM,EAAED,IADT;AAEC,QAAA,MAAM,EAAEhB,KAFT;AAGC,QAAA,WAAW,EAAEiB,WAHd;AAIC,QAAA,KAAK,EAAE,KAAKT,KAAL,CAAWC,KAJnB;AAKC,QAAA,CAAC,EAAE,CAACO,IAAI,GAAGC,WAAR,IAAuB,CAL3B;AAMC,QAAA,CAAC,EAAE,CAACD,IAAI,GAAGC,WAAR,IAAuB,CAN3B;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,CADD;AAYA;;;;EArD2CrB,KAAK,CAACsB,a;;AAA9BhB,e,CACbiB,S,GAAY;AAClBnB,EAAAA,KAAK,EAAEH,SAAS,CAACuB,MADC;AAElBJ,EAAAA,IAAI,EAAEnB,SAAS,CAACwB,MAFE;AAGlBJ,EAAAA,WAAW,EAAEpB,SAAS,CAACwB,MAHL;AAIlBT,EAAAA,SAAS,EAAEf,SAAS,CAACwB;AAJH,C;AADCnB,e,CAQboB,Y,GAAe;AACrBtB,EAAAA,KAAK,EAALA,KADqB;AAErBgB,EAAAA,IAAI,EAAE,EAFe;AAGrBC,EAAAA,WAAW,EAAE,CAHQ;AAIrBL,EAAAA,SAAS,EAAE;AAJU,C;SARFV,e","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, ART } from 'react-native';\nimport AnimatedCircle from '../animated/AnimatedCircle';\nimport { color } from '../const';\n\nconst { Surface } = ART;\n\nexport default class BreathingLoader extends React.PureComponent {\n\tstatic propTypes = {\n\t\tcolor: PropTypes.string,\n\t\tsize: PropTypes.number,\n\t\tstrokeWidth: PropTypes.number,\n\t\tfrequency: PropTypes.number\n\t};\n\n\tstatic defaultProps = {\n\t\tcolor,\n\t\tsize: 30,\n\t\tstrokeWidth: 3,\n\t\tfrequency: 800\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tscale: new Animated.Value(0.1)\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis._animation();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.unmounted = true;\n\t}\n\n\t_animation = () => {\n\t\tAnimated.sequence([\n\t\t\tAnimated.timing(this.state.scale, { toValue: 1, duration: this.props.frequency }),\n\t\t\tAnimated.timing(this.state.scale, { toValue: 0.1, duration: this.props.frequency })\n\t\t]).start(() => {\n\t\t\t!this.unmounted && this._animation();\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { color, size, strokeWidth } = this.props;\n\t\treturn (\n\t\t\t<Surface width={size + strokeWidth} height={size + strokeWidth}>\n\t\t\t\t<AnimatedCircle\n\t\t\t\t\tradius={size}\n\t\t\t\t\tstroke={color}\n\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\tscale={this.state.scale}\n\t\t\t\t\tx={(size + strokeWidth) / 2}\n\t\t\t\t\ty={(size + strokeWidth) / 2}\n\t\t\t\t/>\n\t\t\t</Surface>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}